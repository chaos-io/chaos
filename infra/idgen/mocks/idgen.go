// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chaos-io/chaos/infra/idgen (interfaces: IIDGenerator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIDGenerator is a mock of IIDGenerator interface.
type MockIIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIIDGeneratorMockRecorder
}

// MockIIDGeneratorMockRecorder is the mock recorder for MockIIDGenerator.
type MockIIDGeneratorMockRecorder struct {
	mock *MockIIDGenerator
}

// NewMockIIDGenerator creates a new mock instance.
func NewMockIIDGenerator(ctrl *gomock.Controller) *MockIIDGenerator {
	mock := &MockIIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIDGenerator) EXPECT() *MockIIDGeneratorMockRecorder {
	return m.recorder
}

// GenID mocks base method.
func (m *MockIIDGenerator) GenID(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenID", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenID indicates an expected call of GenID.
func (mr *MockIIDGeneratorMockRecorder) GenID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenID", reflect.TypeOf((*MockIIDGenerator)(nil).GenID), arg0)
}

// GenMultiIDs mocks base method.
func (m *MockIIDGenerator) GenMultiIDs(arg0 context.Context, arg1 int) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenMultiIDs", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenMultiIDs indicates an expected call of GenMultiIDs.
func (mr *MockIIDGeneratorMockRecorder) GenMultiIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenMultiIDs", reflect.TypeOf((*MockIIDGenerator)(nil).GenMultiIDs), arg0, arg1)
}
