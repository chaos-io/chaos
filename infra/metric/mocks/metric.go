// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chaos-io/chaos/infra/metric (interfaces: IMetric)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metric "github.com/chaos-io/chaos/infra/metric"
	gomock "github.com/golang/mock/gomock"
)

// MockIMetric is a mock of IMetric interface.
type MockIMetric struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricMockRecorder
}

// MockIMetricMockRecorder is the mock recorder for MockIMetric.
type MockIMetricMockRecorder struct {
	mock *MockIMetric
}

// NewMockIMetric creates a new mock instance.
func NewMockIMetric(ctrl *gomock.Controller) *MockIMetric {
	mock := &MockIMetric{ctrl: ctrl}
	mock.recorder = &MockIMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetric) EXPECT() *MockIMetricMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockIMetric) Emit(arg0 []metric.Tag, arg1 ...*metric.Value) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Emit", varargs...)
}

// Emit indicates an expected call of Emit.
func (mr *MockIMetricMockRecorder) Emit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockIMetric)(nil).Emit), varargs...)
}
