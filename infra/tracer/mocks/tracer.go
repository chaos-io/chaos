// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chaos-io/chaos/infra/tracer (interfaces: Tracer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tracer "github.com/chaos-io/chaos/infra/tracer"
	core "github.com/chaos-io/core/go/chaos/core"
	gomock "github.com/golang/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockTracer) Flush(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush", arg0)
}

// Flush indicates an expected call of Flush.
func (mr *MockTracerMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockTracer)(nil).Flush), arg0)
}

// GetSpanFromContext mocks base method.
func (m *MockTracer) GetSpanFromContext(arg0 context.Context) tracer.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanFromContext", arg0)
	ret0, _ := ret[0].(tracer.Span)
	return ret0
}

// GetSpanFromContext indicates an expected call of GetSpanFromContext.
func (mr *MockTracerMockRecorder) GetSpanFromContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanFromContext", reflect.TypeOf((*MockTracer)(nil).GetSpanFromContext), arg0)
}

// Inject mocks base method.
func (m *MockTracer) Inject(arg0 context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", arg0)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockTracerMockRecorder) Inject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockTracer)(nil).Inject), arg0)
}

// StartSpan mocks base method.
func (m *MockTracer) StartSpan(arg0 context.Context, arg1, arg2 string, arg3 ...core.Options) (context.Context, tracer.Span) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpan", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracer.Span)
	return ret0, ret1
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockTracerMockRecorder) StartSpan(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockTracer)(nil).StartSpan), varargs...)
}
