// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chaos-io/chaos/infra/i18n (interfaces: ITranslator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITranslator is a mock of ITranslator interface.
type MockITranslator struct {
	ctrl     *gomock.Controller
	recorder *MockITranslatorMockRecorder
}

// MockITranslatorMockRecorder is the mock recorder for MockITranslator.
type MockITranslatorMockRecorder struct {
	mock *MockITranslator
}

// NewMockITranslator creates a new mock instance.
func NewMockITranslator(ctrl *gomock.Controller) *MockITranslator {
	mock := &MockITranslator{ctrl: ctrl}
	mock.recorder = &MockITranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITranslator) EXPECT() *MockITranslatorMockRecorder {
	return m.recorder
}

// MustTranslate mocks base method.
func (m *MockITranslator) MustTranslate(arg0 context.Context, arg1, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustTranslate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// MustTranslate indicates an expected call of MustTranslate.
func (mr *MockITranslatorMockRecorder) MustTranslate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustTranslate", reflect.TypeOf((*MockITranslator)(nil).MustTranslate), arg0, arg1, arg2)
}

// Translate mocks base method.
func (m *MockITranslator) Translate(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockITranslatorMockRecorder) Translate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockITranslator)(nil).Translate), arg0, arg1, arg2)
}
