package model

import (
	"context"
	"sync"

	"github.com/chaos-io/chaos/db"
	"github.com/chaos-io/chaos/generator/model/{{.GoPackageName}}"
	"github.com/chaos-io/chaos/logs"
)

var {{.LowerCamelName}}Model *{{.Name}}Model
var {{.LowerCamelName}}ModelOnce sync.Once

type {{.Name}}Model struct {
	DB *db.DB
}

func Get{{.Name}}Model() *{{.Name}}Model {
	{{.LowerCamelName}}ModelOnce.Do(func() {
		{{.LowerCamelName}}Model = New{{.Name}}Model()
	})

	return {{.LowerCamelName}}Model
}

func New{{.Name}}Model() *{{.Name}}Model {
	m := &{{.Name}}Model{DB: initDB()}
	if !m.DB.Config.DisableAutoMigrate || !d.Migrator().HasTable(&{{.GoPackageName}}.{{.Name}}{}) {
		if err := d.AutoMigrate(&{{.GoPackageName}}.{{.Name}}{}); err != nil {
			logs.Error("Init {{.Name}}Model model err: ", err)
			panic(err)
		}
	}

	return m
}

func (m *{{.Name}}Model) Create(ctx context.Context, {{.LowerCamelName}} *{{.GoPackageName}}.{{.Name}}) (int64, error) {
	result := m.DB.WithContext(ctx).Create({{.LowerCamelName}})
	return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) Get(ctx context.Context, id string) (*{{.GoPackageName}}.{{.Name}}, error) {
	{{.LowerCamelName}} := &{{.GoPackageName}}.{{.Name}}{}
	return {{.LowerCamelName}}, m.DB.WithContext(ctx).First({{.LowerCamelName}}, "id = ?", id).Error
}

func (m *{{.Name}}Model) Delete(ctx context.Context, id string) (int64, error) {
	result := m.DB.WithContext(ctx).Where("id = ?", id).Delete(&{{.GoPackageName}}.{{.Name}}{})
	return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) Update(ctx context.Context, {{.LowerCamelName}} *{{.GoPackageName}}.{{.Name}}) (int64, error) {
	result := m.DB.WithContext(ctx).Updates({{.LowerCamelName}})
	return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) List(ctx context.Context, filter string, condition ...string) ([]*{{.GoPackageName}}.{{.Name}}, error) {
	var {{.LowerCamelName}} []*{{.GoPackageName}}.{{.Name}}

	tx := m.DB.WithContext(ctx)
	// todo add condition

	return {{.LowerCamelName}}, tx.Find(&{{.LowerCamelName}}).Error
}

func (m *{{.Name}}Model) BatchCreate(ctx context.Context, {{.LowerCamelName}} ...*{{.GoPackageName}}.{{.Name}}) (int64, error) {
	result := m.DB.WithContext(ctx).CreateInBatches({{.LowerCamelName}}, len({{.LowerCamelName}}))
	return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) BatchGet(ctx context.Context, ids ...string) ([]*{{.GoPackageName}}.{{.Name}}, error) {
	var {{.LowerCamelName}} []*{{.GoPackageName}}.{{.Name}}
	return {{.LowerCamelName}}, m.DB.WithContext(ctx).Find(&{{.LowerCamelName}}, "id = ?", ids).Error
}

func (m *{{.Name}}Model) BatchDelete(ctx context.Context, ids ...string) (int64, error) {
	result := m.DB.WithContext(ctx).Where("id = ?", ids).Delete(&{{.GoPackageName}}.{{.Name}}{})
	return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) BatchUpdate(ctx context.Context, {{.LowerCamelName}} []*{{.GoPackageName}}.{{.Name}}) (int64, error) {
	result := m.DB.WithContext(ctx).Updates({{.LowerCamelName}})
	return result.RowsAffected, result.Error
}
