// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chaos-io/chaos/pkg/config (interfaces: IConfigProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConfigProvider is a mock of IConfigProvider interface.
type MockIConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigProviderMockRecorder
}

// MockIConfigProviderMockRecorder is the mock recorder for MockIConfigProvider.
type MockIConfigProviderMockRecorder struct {
	mock *MockIConfigProvider
}

// NewMockIConfigProvider creates a new mock instance.
func NewMockIConfigProvider(ctrl *gomock.Controller) *MockIConfigProvider {
	mock := &MockIConfigProvider{ctrl: ctrl}
	mock.recorder = &MockIConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigProvider) EXPECT() *MockIConfigProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIConfigProvider) Get(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIConfigProviderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIConfigProvider)(nil).Get), arg0)
}

// Scan mocks base method.
func (m *MockIConfigProvider) Scan(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockIConfigProviderMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIConfigProvider)(nil).Scan), arg0)
}

// ScanFrom mocks base method.
func (m *MockIConfigProvider) ScanFrom(arg0 interface{}, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanFrom", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanFrom indicates an expected call of ScanFrom.
func (mr *MockIConfigProviderMockRecorder) ScanFrom(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanFrom", reflect.TypeOf((*MockIConfigProvider)(nil).ScanFrom), varargs...)
}
